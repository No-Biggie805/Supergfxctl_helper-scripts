#!/usr/bin/env bash
# sgfx-manager - interactive helper to inspect/control NVIDIA services/processes and run sgfx switch scripts
# Place this file in ~/bin and make executable: chmod +x ~/bin/sgfx-manager
# It runs privileged commands via sudo (you'll be prompted for your password when needed).

set -u

HOME_BIN="$HOME/bin"
LOGFILE="$HOME/.local/share/sgfx-manager.log"

# Helper printing
info()  { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()   { printf "\033[1;31m[ERR]\033[0m %s\n" "$*"; }
note()  { printf "\033[1;32m%s\033[0m\n" "$*"; }

# Ensure log dir
mkdir -p "$(dirname "$LOGFILE")"

# Utility functions
service_exists() {
  systemctl list-unit-files --type=service --no-legend | awk '{print $1}' | grep -q "^${1}.service" 2>/dev/null
}

service_active() {
  systemctl is-active --quiet "${1}.service" 2>/dev/null
}

service_enabled() {
  systemctl is-enabled --quiet "${1}.service" 2>/dev/null
}

print_services_status() {
  echo
  note "NVIDIA service status:"
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      printf "  %-20s active=%-4s enabled=%-4s\n" "$svc" \
        "$( service_active "$svc" && echo yes || echo no )" \
        "$( service_enabled "$svc" && echo yes || echo no )"
    else
      printf "  %-20s %s\n" "$svc" "not present"
    fi
  done
  echo
}

list_nvidia_users() {
  echo
  note "Processes holding /dev/nvidia* (fuser + lsof + ps):"
  if command -v fuser >/dev/null 2>&1; then
    sudo fuser -v /dev/nvidia* 2>/dev/null || true
  else
    warn "fuser not available"
  fi

  echo "---- lsof (if present) ----"
  if command -v lsof >/dev/null 2>&1; then
    sudo lsof /dev/nvidia* 2>/dev/null || true
  else
    warn "lsof not available"
  fi

  # Print ps lines for the PIDs found by fuser (if any)
  PIDS="$(sudo fuser -v /dev/nvidia* 2>/dev/null | awk 'NR>1 {print $2}' | tr '\n' ' ' || true)"
  if [[ -n "$PIDS" ]]; then
    echo
    echo "Process details:"
    ps -o pid,user,comm,args -p $PIDS 2>/dev/null || true
  else
    echo "No processes found holding /dev/nvidia*."
  fi
  echo
}

# Updated confirm: type 'yes' to continue, press Enter (or type 'no') to cancel
confirm() {
  # usage: confirm "Prompt message"
  local prompt="${1:-Proceed?}"
  if [[ "${AUTO_YES:-0}" = "1" ]]; then
    return 0
  fi
  echo
  # explicit instruction: type 'yes' to continue; Enter (or 'no') cancels
  read -rp "$prompt
Type 'yes' to continue, or press Enter to cancel: " ans
  case "${ans,,}" in   # lowercase compare
    yes|y) return 0 ;;
    *)    return 1 ;;
  esac
}

stop_and_mask_services() {
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      info "Stopping + disabling + masking $svc ..."
      sudo systemctl stop "${svc}.service" 2>/dev/null || true
      sudo systemctl disable --now "${svc}.service" 2>/dev/null || true
      sudo systemctl mask "${svc}.service" 2>/dev/null || true
      echo "$(date -Iseconds) Stopped/masked $svc" >> "$LOGFILE"
    else
      warn "$svc not present, skipping"
    fi
  done
  note "Services handled."
}

unmask_and_enable_services() {
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      info "Unmasking + enabling + starting $svc ..."
      sudo systemctl unmask "${svc}.service" 2>/dev/null || true
      sudo systemctl enable --now "${svc}.service" 2>/dev/null || true
      echo "$(date -Iseconds) Unmasked/enabled $svc" >> "$LOGFILE"
    else
      warn "$svc not present, skipping"
    fi
  done
  note "Services handled."
}

kill_nvidia_processes() {
  PIDS="$(sudo fuser -v /dev/nvidia* 2>/dev/null | awk 'NR>1 {print $2}' | tr '\n' ' ' || true)"
  if [[ -z "$PIDS" ]]; then
    info "No processes found using /dev/nvidia*."
    return
  fi
  echo "Found PIDs: $PIDS"
  ps -o pid,user,comm,args -p $PIDS 2>/dev/null || true
  if confirm "Send TERM to these PIDs and wait (then KILL survivors)?" ; then
    sudo kill -TERM $PIDS 2>/dev/null || true
    sleep 2
    STILL="$(ps -o pid= -p $PIDS 2>/dev/null || true)"
    if [[ -n "$STILL" ]]; then
      info "Killing remaining: $STILL"
      sudo kill -KILL $STILL 2>/dev/null || true
    fi
    echo "$(date -Iseconds) Killed PIDs: $PIDS" >> "$LOGFILE"
    note "Done."
  else
    note "Aborted killing processes."
  fi
}

# NEW: pre-check before switching to Integrated or Vfio
precheck_before_switch() {
  # returns 0 = OK to proceed, 1 = user chose to abort
  local services_found=0
  local pids
  echo
  note "Pre-check: looking for nvidia daemons and processes holding /dev/nvidia*..."

  # services
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      if service_active "$svc"; then
        printf "  %-20s : %s\n" "$svc" "ACTIVE"
        services_found=1
      else
        printf "  %-20s : %s\n" "$svc" "inactive"
      fi
    else
      printf "  %-20s : %s\n" "$svc" "not present"
    fi
  done

  # processes
  pids="$(sudo fuser -v /dev/nvidia* 2>/dev/null | awk 'NR>1 {print $2}' | tr '\n' ' ' || true)"
  if [[ -n "$pids" ]]; then
    echo
    echo "Processes currently holding /dev/nvidia*: $pids"
    ps -o pid,user,comm,args -p $pids 2>/dev/null || true
  else
    echo
    echo "No processes currently hold /dev/nvidia*."
  fi

  # if anything found, show recommended commands and ask to continue
  if [[ $services_found -ne 0 || -n "$pids" ]]; then
    cat <<'EOF'

WARNING: active NVIDIA daemons or user processes were detected.
If you proceed without stopping them the switch may fail or crash applications.

Recommended commands to stop the services (run as your user with sudo):

  sudo systemctl stop nvidia-persistenced.service nvidia-powerd.service
  sudo systemctl disable --now nvidia-persistenced.service nvidia-powerd.service
  sudo systemctl mask nvidia-persistenced.service nvidia-powerd.service

Recommended to stop processes holding the GPU (example, run as your user with sudo):
  sudo fuser -v /dev/nvidia*          # shows PIDs
  sudo kill -TERM <pid>               # polite termination
  sleep 2
  sudo kill -KILL <pid>               # force kill if still present

If you prefer the script to stop/mask services and kill processes automatically,
run the sgfx-switch scripts with their --auto option (or set AUTO_YES=1 for this manager).

EOF

    if confirm "Do you want to continue the switch anyway?"; then
      info "User chose to continue despite active services/processes."
      return 0
    else
      note "Aborting switch — please stop/mask services and/or kill processes first."
      return 1
    fi
  fi

  # nothing found — ok to proceed
  return 0
}

try_run_script() {
  # run a helper script from ~/bin if present
  local name="$1"
  local path="$HOME_BIN/$name"
  if [[ -x "$path" ]]; then
    info "Running $path (it may prompt or require sudo internally)..."
    # run as the current user (script will use sudo for privileged steps)
    "$path"
    echo "$(date -Iseconds) Ran $path (exit=$?)" >> "$LOGFILE"
  else
    warn "$path not found or not executable."
    echo "If you have the sgfx-switch scripts, put them as:"
    echo "  $HOME_BIN/sgfx-switch-integrated"
    echo "  $HOME_BIN/sgfx-switch-vfio"
    echo "  $HOME_BIN/sgfx-switch-hybrid"
    echo "Make them executable with: chmod +x $HOME_BIN/sgfx-switch-*"
  fi
}

show_log_tail() {
  echo
  echo "Last 200 lines of manager log ($LOGFILE):"
  tail -n 200 "$LOGFILE" 2>/dev/null || echo "(no log yet)"
  echo
}

# Main interactive menu
while true; do
  echo "=============================================="
  echo " sgfx-manager - hybrid <-> vfio helper"
  echo " Path for scripts: $HOME_BIN"
  echo " Log: $LOGFILE"
  echo "----------------------------------------------"
  printf " Options:\n"
  printf "  1) Show NVIDIA services status\n"
  printf "  2) Show processes using /dev/nvidia* (detailed)\n"
  printf "  3) Stop + mask nvidia services (recommended before VFIO)\n"
  printf "  4) Unmask + enable nvidia services (restore)\n"
  printf "  5) Kill processes using /dev/nvidia*\n"
  printf "  6) Attempt switch → Integrated (calls sgfx-switch-integrated if present)\n"
  printf "  7) Attempt switch → Vfio (calls sgfx-switch-vfio if present)\n"
  printf "  8) Attempt switch → Hybrid (calls sgfx-switch-hybrid if present)\n"
  printf "  9) View manager log\n"
  printf " 10) Exit\n"
  echo "----------------------------------------------"
  read -rp "Choose an option [1-10]: " choice

  case "$choice" in
    1)
      print_services_status
      ;;
    2)
      list_nvidia_users
      ;;
    3)
      if confirm "Stop + mask nvidia services now? (requires sudo)"; then
        stop_and_mask_services
      else
        note "Cancelled."
      fi
      ;;
    4)
      if confirm "Unmask + enable nvidia services now? (requires sudo)"; then
        unmask_and_enable_services
      else
        note "Cancelled."
      fi
      ;;
    5)
      kill_nvidia_processes
      ;;
    6)
      # pre-check before attempting Integrated
	      if precheck_before_switch; then
        if confirm "Run sgfx-switch-integrated (if present)?"; then
          try_run_script "sgfx-switch-integrated"
        else
          note "Cancelled."
        fi
      fi
      ;;
    7)
      # pre-check before attempting Vfio
      if precheck_before_switch; then
        if confirm "Run sgfx-switch-vfio (if present)?"; then
          try_run_script "sgfx-switch-vfio"
        else
          note "Cancelled."
        fi
      fi
      ;;
    8)
      if confirm "Run sgfx-switch-hybrid (if present)?"; then
        try_run_script "sgfx-switch-hybrid"
      else
        note "Cancelled."
      fi
      ;;
    9)
      show_log_tail
      ;;
    10)
      note "Bye."
      exit 0
      ;;
    *)
      warn "Invalid option"
      ;;
  esac

  echo
  # small pause so output is readable
  sleep 0.2
done
