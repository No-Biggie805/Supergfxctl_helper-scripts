#!/usr/bin/env bash
# sgfx-manager - interactive helper to inspect/control NVIDIA services/processes and run sgfx switch scripts
# Place this file in ~/bin and make executable: chmod +x ~/bin/sgfx-manager
# It runs privileged commands via sudo (you'll be prompted for your password when needed).

set -u

HOME_BIN="$HOME/bin"
LOGFILE="$HOME/.local/share/sgfx-manager.log"

# Helper printing
info()  { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()   { printf "\033[1;31m[ERR]\033[0m %s\n" "$*"; }
note()  { printf "\033[1;32m%s\033[0m\n" "$*"; }

# Ensure log dir
mkdir -p "$(dirname "$LOGFILE")"

# Utility functions
service_exists() {
  systemctl list-unit-files --type=service --no-legend | awk '{print $1}' | grep -q "^${1}.service" 2>/dev/null
}

service_active() {
  systemctl is-active --quiet "${1}.service" 2>/dev/null
}

service_enabled() {
  systemctl is-enabled --quiet "${1}.service" 2>/dev/null
}

print_services_status() {
  echo
  note "NVIDIA service status:"
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      printf "  %-20s active=%-4s enabled=%-4s\n" "$svc" \
        "$( service_active "$svc" && echo yes || echo no )" \
        "$( service_enabled "$svc" && echo yes || echo no )"
    else
      printf "  %-20s %s\n" "$svc" "not present"
    fi
  done
  echo
}

list_nvidia_users() {
  echo
  note "Processes holding /dev/nvidia* (fuser + lsof + ps):"
  if command -v fuser >/dev/null 2>&1; then
    sudo fuser -v /dev/nvidia* 2>/dev/null || true
  else
    warn "fuser not available"
  fi

  echo "---- lsof (if present) ----"
  if command -v lsof >/dev/null 2>&1; then
    sudo lsof /dev/nvidia* 2>/dev/null || true
  else
    warn "lsof not available"
  fi

  # Print ps lines for the PIDs found by fuser (if any)
  PIDS="$(sudo fuser -v /dev/nvidia* 2>/dev/null | awk 'NR>1 {print $2}' | tr '\n' ' ' || true)"
  if [[ -n "$PIDS" ]]; then
    echo
    echo "Process details:"
    ps -o pid,user,comm,args -p $PIDS 2>/dev/null || true
  else
    echo "No processes found holding /dev/nvidia*."
  fi
  echo
}

confirm() {
  # usage: confirm "Prompt message"
  local prompt="${1:-Proceed?}"
  if [[ "${AUTO_YES:-0}" = "1" ]]; then
    return 0
  fi
  read -rp "$prompt [y/N]: " ans
  case "$ans" in
    [Yy]|[Yy][Ee][Ss]) return 0 ;;
    *) return 1 ;;
  esac
}

stop_and_mask_services() {
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      info "Stopping + disabling + masking $svc ..."
      sudo systemctl stop "${svc}.service" 2>/dev/null || true
      sudo systemctl disable --now "${svc}.service" 2>/dev/null || true
      sudo systemctl mask "${svc}.service" 2>/dev/null || true
      echo "$(date -Iseconds) Stopped/masked $svc" >> "$LOGFILE"
    else
      warn "$svc not present, skipping"
    fi
  done
  note "Services handled."
}

unmask_and_enable_services() {
  for svc in nvidia-persistenced nvidia-powerd; do
    if service_exists "$svc"; then
      info "Unmasking + enabling + starting $svc ..."
      sudo systemctl unmask "${svc}.service" 2>/dev/null || true
      sudo systemctl enable --now "${svc}.service" 2>/dev/null || true
      echo "$(date -Iseconds) Unmasked/enabled $svc" >> "$LOGFILE"
    else
      warn "$svc not present, skipping"
    fi
  done
  note "Services handled."
}

kill_nvidia_processes() {
  PIDS="$(sudo fuser -v /dev/nvidia* 2>/dev/null | awk 'NR>1 {print $2}' | tr '\n' ' ' || true)"
  if [[ -z "$PIDS" ]]; then
    info "No processes found using /dev/nvidia*."
    return
  fi
  echo "Found PIDs: $PIDS"
  ps -o pid,user,comm,args -p $PIDS 2>/dev/null || true
  if confirm "Send TERM to these PIDs and wait (then KILL survivors)?" ; then
    sudo kill -TERM $PIDS 2>/dev/null || true
    sleep 2
    STILL="$(ps -o pid= -p $PIDS 2>/dev/null || true)"
    if [[ -n "$STILL" ]]; then
      info "Killing remaining: $STILL"
      sudo kill -KILL $STILL 2>/dev/null || true
    fi
    echo "$(date -Iseconds) Killed PIDs: $PIDS" >> "$LOGFILE"
    note "Done."
  else
    note "Aborted killing processes."
  fi
}

try_run_script() {
  # run a helper script from ~/bin if present
  local name="$1"
  local path="$HOME_BIN/$name"
  if [[ -x "$path" ]]; then
    info "Running $path (it may prompt or require sudo internally)..."
    # run as the current user (script will use sudo for privileged steps)
    "$path"
    echo "$(date -Iseconds) Ran $path (exit=$?)" >> "$LOGFILE"
  else
    warn "$path not found or not executable."
    echo "If you have the sgfx-switch scripts, put them as:"
    echo "  $HOME_BIN/sgfx-switch-integrated"
    echo "  $HOME_BIN/sgfx-switch-vfio"
    echo "  $HOME_BIN/sgfx-switch-hybrid"
    echo "Make them executable with: chmod +x $HOME_BIN/sgfx-switch-*"
  fi
}

show_log_tail() {
  echo
  echo "Last 200 lines of manager log ($LOGFILE):"
  tail -n 200 "$LOGFILE" 2>/dev/null || echo "(no log yet)"
  echo
}

# Main interactive menu
while true; do
  echo "=============================================="
  echo " sgfx-manager - hybrid <-> vfio helper"
  echo " Path for scripts: $HOME_BIN"
  echo " Log: $LOGFILE"
  echo "----------------------------------------------"
  printf " Options:\n"
  printf "  1) Show NVIDIA services status\n"
  printf "  2) Show processes using /dev/nvidia* (detailed)\n"
  printf "  3) Stop + mask nvidia services (recommended before VFIO)\n"
  printf "  4) Unmask + enable nvidia services (restore)\n"
  printf "  5) Kill processes using /dev/nvidia*\n"
  printf "  6) Attempt switch → Integrated (calls sgfx-switch-integrated if present)\n"
  printf "  7) Attempt switch → Vfio (calls sgfx-switch-vfio if present)\n"
  printf "  8) Attempt switch → Hybrid (calls sgfx-switch-hybrid if present)\n"
  printf "  9) View manager log\n"
  printf " 10) Exit\n"
  echo "----------------------------------------------"
  read -rp "Choose an option [1-10]: " choice

  case "$choice" in
    1)
      print_services_status
      ;;
    2)
      list_nvidia_users
      ;;
    3)
      if confirm "Stop + mask nvidia services now? (requires sudo)"; then
        stop_and_mask_services
      else
        note "Cancelled."
      fi
      ;;
    4)
      if confirm "Unmask + enable nvidia services now? (requires sudo)"; then
        unmask_and_enable_services
      else
        note "Cancelled."
      fi
      ;;
    5)
      kill_nvidia_processes
      ;;
    6)
      if confirm "Run sgfx-switch-integrated (if present)?"; then
        try_run_script "sgfx-switch-integrated"
      else
        note "Cancelled."
      fi
      ;;
    7)
      if confirm "Run sgfx-switch-vfio (if present)?"; then
        try_run_script "sgfx-switch-vfio"
      else
        note "Cancelled."
      fi
      ;;
    8)
      if confirm "Run sgfx-switch-hybrid (if present)?"; then
        try_run_script "sgfx-switch-hybrid"
      else
        note "Cancelled."
      fi
      ;;
    9)
      show_log_tail
      ;;
    10)
      note "Bye."
      exit 0
      ;;
    *)
      warn "Invalid option"
      ;;
  esac

  echo
  # small pause so output is readable
  sleep 0.2
done
